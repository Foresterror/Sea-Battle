Спецификация модели.



Название классов:
-----------------
model.Game - игра;
model.Player - игрок;
Field - поле игры;
Cell - ячейка поля;
model.Ship - корабль;
BodyPart - часть корабля;
Coordinate - координата;
  -- Как вариант, можно использовать готовый класс java.awt.Point.
  -- Там есть все, что необходимо для координаты.

shipwreck - кораблекрушение;
shoot - выстрел;



Структура и интерфейсы объектов;
--------------------------------
class model.Player {
	- model.Ship[] ships;
	- Field playerField;
	- BattleMap map; / - Field enemyField;

	+ shoot();
	+
}

class Field {
	- int size;
	- Cell[][] cells;
	-
}

class Cell {
	- enum CellState {EMPTY, SHOT, SHIP, DAMAGED_SHIP};
	- int x, y;
}

class model.Ship {
	- int size;
	- boolean isAlive;
	- BodyPart[] parts;

	+ boolean isAlive(){
		for(BodyPart part : parts) {
		  if (!part.isDamaged) {
		    return true;
		  }
		}
		return false;
	  }

}

class BodyPart {
	- int x, y;
	- boolean isDamaged;
}



Конфликт выбора реализации взаимодействия поля,ячеек и корабля:
1. Реализация ячейки имеет ссылку на корабль;
  или
2. Реализация ячейки не имеет ссылки на корабль.

Вариант, когда ни корабль, ни его части не имеют ссылки на ячейку. Но имеют только координаты. И ячейка имеет координаты, и корабль имеет координаты.

Но, с другой стороны, корабль находится на ячейке, т.е. ячейка вмещает в себе корабль.




Конфликт выбора реализации координат:
1. Координаты имеют букву и цыфру;
  или
2. Координаты имеют две цифры.



Сценарий выстрела:
------------------
1. Игрок делает выстрел
    player.shoot(Point p);
2. Поле противника этот выстрел принимает
    enemyField.takeAShoot(Point p);

    точка отсчета:
    ?Я поле с кораблями
      или
    ?Я игрок, у которого есть корабли

    т.е. кто принимает выстрел:
    ?игрок
      или
    ?поле

3. По



Результат выстрела:
-------------------
1. Зафиксировать выстрел в данных координатах;
2. Проверить, не находится ли корабль в данных координатах.
     если (находится) то зафиксироватьРанение();
   Проверить, не убит ли данный корабль.
     если (убит) то зафиксироватьКораблекрушение().


Режимы приложения:
1. Режим меню;
2. Режим подготовки;
3. Режим игры;
4. Режим итогов.


+ Запускаем приложение.
- появляется меню.
+ Создаем новую игру.
- высвечивается поле, где надо расставить корабли
+ Раставляем корабли на поле.
+ Жмем "Готов"
- приложение переходит в режим игры
+ Делаем выстрел, наводя указателем мыши на поле противника и кликом на одну из клеток.
- в ответ на вражеском поле высвечивается результат выстрела:
  - если попадание, то крестик;
  - если убийство, то крестик и точки вокруг корабля;
  - если мимо, то точка.
= Теперь делает выстрел противник.
- как результат, у нас на поле появляется:
  - точка, если противник не попал;
  - крестик, если попал.


Начальная модель:
-----------------
	- два игрока
	- два поля
	- клетки
	- корабли на полях
	- отметки на клетках

	- стрелять(); // обращается к полю противника, возвращает результат стрельбы;